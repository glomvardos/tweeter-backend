// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String @unique
  firstname   String
  lastname    String
  password    String
  tweets      Tweet[]
  followers   Follower[]
  following   Following[]
  comments    Comment[]
  likesTweet  LikeTweet[]
  likesComment LikeComment[]
  savedTweets SavedTweet[]
}

model Tweet {
  id          Int @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  isPublic    Boolean
  userId      Int
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       LikeTweet[]
  savedTweets  SavedTweet[]
  comments    Comment[]   
}

model SavedTweet {
  id          Int @id @default(autoincrement())
  tweetId     Int
  tweet       Tweet @relation(fields: [tweetId], references: [id])
  userId      Int
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follower {
  id          Int @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User[]
}

model Following {
  id          Int @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User[]
}

model LikeTweet {
  id          Int @id @default(autoincrement())
  userId      Int
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweetId     Int
  tweet       Tweet @relation(fields: [tweetId], references: [id])
}

model LikeComment {
  id          Int @id @default(autoincrement())
  userId      Int
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId   Int
  comment     Comment @relation(fields: [commentId], references: [id])
}

model Comment {
  id          Int @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  tweetId     Int
  tweet       Tweet @relation(fields: [tweetId], references: [id])
  userId      Int
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       LikeComment[]
}
